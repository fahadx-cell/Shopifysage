<!-- AUTO-CONVERTED â€” manually verify dynamic behaviors, JS interactivity, and variable mappings. -->

<div class="product-template max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Product Details -->
  <div class="product-main grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
    
    <!-- Product Images -->
    <div class="product-images space-y-4">
      <!-- Main Image -->
      <div class="product-image-main aspect-square rounded-lg overflow-hidden bg-gray-100">
        {% if product.selected_or_first_available_variant.featured_media %}
          <img id="main-product-image"
               src="{{ product.selected_or_first_available_variant.featured_media | img_url: '800x800' }}" 
               alt="{{ product.selected_or_first_available_variant.featured_media.alt | default: product.title }}"
               class="w-full h-full object-cover">
        {% elsif product.featured_media %}
          <img id="main-product-image"
               src="{{ product.featured_media | img_url: '800x800' }}" 
               alt="{{ product.featured_media.alt | default: product.title }}"
               class="w-full h-full object-cover">
        {% else %}
          <div class="w-full h-full flex items-center justify-center text-gray-400">
            No image available
          </div>
        {% endif %}
      </div>
      
      <!-- Image Thumbnails -->
      {% if product.media.size > 1 %}
        <div class="product-thumbnails flex gap-2 overflow-x-auto">
          {% for media in product.media limit: 6 %}
            {% if media.media_type == 'image' %}
              <button type="button"
                      onclick="changeMainImage('{{ media | img_url: '800x800' }}', {{ forloop.index0 }})"
                      class="thumbnail-btn flex-shrink-0 w-20 h-20 rounded-md overflow-hidden border-2 transition-colors
                             {% if forloop.first %}border-gray-900{% else %}border-gray-200{% endif %}"
                      data-thumbnail-index="{{ forloop.index0 }}">
                <img src="{{ media | img_url: '150x150' }}" 
                     alt="{{ media.alt | default: product.title }} view {{ forloop.index }}"
                     class="w-full h-full object-cover">
              </button>
            {% endif %}
          {% endfor %}
        </div>
      {% endif %}
    </div>

    <!-- Product Info -->
    <div class="product-info space-y-6">
      
      <!-- Badges -->
      <div class="product-badges flex gap-2">
        {% if product.compare_at_price > product.price %}
          <span class="badge bg-red-100 text-red-800 px-3 py-1 text-sm font-medium rounded-full">Sale</span>
        {% endif %}
        {% if product.tags contains 'featured' %}
          <span class="badge bg-blue-100 text-blue-800 px-3 py-1 text-sm font-medium rounded-full">Featured</span>
        {% endif %}
        {% if product.tags contains 'bestseller' %}
          <span class="badge bg-green-100 text-green-800 px-3 py-1 text-sm font-medium rounded-full">Best Seller</span>
        {% endif %}
      </div>

      <!-- Title and Price -->
      <div>
        <h1 class="product-title font-serif text-3xl font-bold text-gray-900 mb-2">
          {{ product.title }}
        </h1>
        <div class="product-pricing flex items-center gap-4 mb-4">
          {% if product.compare_at_price > product.price %}
            <span class="price-sale text-3xl font-bold text-red-600">{{ product.price | money }}</span>
            <span class="price-compare text-xl text-gray-500 line-through">{{ product.compare_at_price | money }}</span>
          {% else %}
            <span class="price-regular text-3xl font-bold text-gray-900">{{ product.price | money }}</span>
          {% endif %}
          
          <!-- Star Rating (static for now) -->
          <div class="product-rating flex items-center gap-1">
            {% for i in (1..5) %}
              <svg class="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
            {% endfor %}
            <span class="text-sm text-gray-600 ml-2">(24 reviews)</span>
          </div>
        </div>
        <p class="product-description text-gray-600 leading-relaxed">
          {{ product.description }}
        </p>
      </div>

      <!-- Product Form -->
      <form action="{{ routes.cart_add_url }}" method="post" enctype="multipart/form-data" id="product-form" class="product-form space-y-4">
        
        <!-- Variant Selection -->
        {% unless product.has_only_default_variant %}
          {% for option in product.options_with_values %}
            <div class="variant-selector">
              <label class="block text-sm font-medium text-gray-700 mb-2">
                {{ option.name }}:
              </label>
              <div class="variant-options flex flex-wrap gap-2">
                {% for value in option.values %}
                  <input type="radio" 
                         name="option-{{ option.position }}" 
                         id="{{ option.name | handleize }}-{{ value | handleize }}"
                         value="{{ value }}" 
                         class="sr-only variant-input"
                         {% if option.selected_value == value %}checked{% endif %}>
                  <label for="{{ option.name | handleize }}-{{ value | handleize }}" 
                         class="variant-label px-4 py-2 border border-gray-300 rounded-md cursor-pointer hover:border-gray-400 transition-colors">
                    {{ value }}
                  </label>
                {% endfor %}
              </div>
            </div>
          {% endfor %}
        {% endunless %}

        <!-- Quantity and Actions -->
        <div class="quantity-actions space-y-4">
          <div class="quantity-selector flex items-center gap-4">
            <label class="text-sm font-medium text-gray-700">Quantity:</label>
            <div class="quantity-controls flex items-center border border-gray-300 rounded-md">
              <button type="button" 
                      onclick="changeQuantity(-1)" 
                      class="quantity-btn px-3 py-2 hover:bg-gray-50 transition-colors">
                -
              </button>
              <input type="number" 
                     name="quantity" 
                     id="quantity-input"
                     value="1" 
                     min="1" 
                     class="quantity-input w-16 py-2 text-center border-x border-gray-300 focus:outline-none">
              <button type="button" 
                      onclick="changeQuantity(1)" 
                      class="quantity-btn px-3 py-2 hover:bg-gray-50 transition-colors">
                +
              </button>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="product-actions flex gap-3">
            <button type="submit" 
                    name="add" 
                    class="btn-add-cart flex-1 bg-gray-900 text-white py-3 px-6 rounded-md hover:bg-gray-800 transition-colors flex items-center justify-center gap-2 text-lg font-medium"
                    {% unless product.available %}disabled{% endunless %}>
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
              </svg>
              {% if product.available %}Add to Cart{% else %}Sold Out{% endif %}
            </button>
            
            <button type="button" 
                    onclick="toggleWishlist({{ product.id }})" 
                    class="btn-wishlist p-3 border border-gray-300 rounded-md hover:border-red-500 hover:text-red-500 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
            </button>
            
            <button type="button" 
                    onclick="shareProduct()" 
                    class="btn-share p-3 border border-gray-300 rounded-md hover:border-gray-400 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
              </svg>
            </button>
          </div>
        </div>

        <select name="id" id="variant-select" class="hidden">
          {% for variant in product.variants %}
            <option value="{{ variant.id }}" 
                    {% if variant == product.selected_or_first_available_variant %}selected{% endif %}
                    data-price="{{ variant.price }}"
                    data-compare-price="{{ variant.compare_at_price }}"
                    data-available="{{ variant.available }}">
              {{ variant.title }}
            </option>
          {% endfor %}
        </select>
      </form>

      <div class="border-t border-gray-200 pt-6"></div>

      <!-- Product Details Collapsibles -->
      <div class="product-details space-y-4">
        
        <!-- Materials & Care -->
        <details class="details-section">
          <summary class="flex items-center justify-between w-full text-left font-medium cursor-pointer py-2 hover:text-gray-600 transition-colors">
            Materials & Care
            <svg class="w-4 h-4 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </summary>
          <div class="details-content pt-2 text-gray-600">
            <ul class="space-y-1 text-sm">
              <li>â€¢ Gold-plated brass with hypoallergenic coating</li>
              <li>â€¢ Nickel-free and lead-free materials</li>
              <li>â€¢ Store in provided jewelry pouch when not wearing</li>
              <li>â€¢ Clean gently with soft cloth, avoid harsh chemicals</li>
              <li>â€¢ Remove before swimming, showering, or exercising</li>
            </ul>
          </div>
        </details>

        <!-- Shipping & Returns -->
        <details class="details-section">
          <summary class="flex items-center justify-between w-full text-left font-medium cursor-pointer py-2 hover:text-gray-600 transition-colors">
            Shipping & Returns
            <svg class="w-4 h-4 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </summary>
          <div class="details-content pt-2 text-gray-600">
            <ul class="space-y-1 text-sm">
              <li>â€¢ Free shipping on orders over $75</li>
              <li>â€¢ Standard delivery: 3-5 business days</li>
              <li>â€¢ Express delivery: 1-2 business days (additional cost)</li>
              <li>â€¢ 30-day return policy for unworn items</li>
              <li>â€¢ Free returns with prepaid return label</li>
            </ul>
          </div>
        </details>
      </div>
    </div>
  </div>

  <!-- Related Products -->
  {% if section.settings.show_related_products %}
    {% assign related_products = collections[product.type].products | where: 'id', '!=', product.id | limit: 4 %}
    {% if related_products.size > 0 %}
      <div class="related-products">
        <h2 class="font-serif text-2xl font-bold text-gray-900 mb-8 text-center">
          You Might Also Like
        </h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Replace this comment with: {% for product in related_products %} ... {% endfor %} -->
          {% for related_product in related_products %}
            {% render 'product-card', product: related_product %}
          {% endfor %}
        </div>
      </div>
    {% endif %}
  {% endif %}
</div>

<script>
// Thumbnail image switching
function changeMainImage(imageUrl, index) {
  const mainImage = document.getElementById('main-product-image');
  const thumbnails = document.querySelectorAll('.thumbnail-btn');
  
  mainImage.src = imageUrl;
  
  // Update thumbnail selection
  thumbnails.forEach((btn, i) => {
    if (i === index) {
      btn.classList.remove('border-gray-200');
      btn.classList.add('border-gray-900');
    } else {
      btn.classList.remove('border-gray-900');
      btn.classList.add('border-gray-200');
    }
  });
}

// Quantity controls
function changeQuantity(delta) {
  const input = document.getElementById('quantity-input');
  const currentValue = parseInt(input.value);
  const newValue = Math.max(1, currentValue + delta);
  input.value = newValue;
}

// Wishlist toggle
function toggleWishlist(productId) {
  const btn = document.querySelector('.btn-wishlist');
  const svg = btn.querySelector('svg');
  
  // Toggle visual state
  if (svg.classList.contains('fill-current')) {
    svg.classList.remove('fill-current', 'text-red-500');
    btn.classList.remove('text-red-500', 'border-red-500');
  } else {
    svg.classList.add('fill-current', 'text-red-500');
    btn.classList.add('text-red-500', 'border-red-500');
  }
  
  // Implement wishlist functionality (local storage, customer metafields, etc.)
  console.log('Wishlist toggle for product:', productId);
}

// Share product
function shareProduct() {
  if (navigator.share) {
    navigator.share({
      title: '{{ product.title | escape }}',
      url: window.location.href
    });
  } else {
    // Fallback: copy to clipboard
    navigator.clipboard.writeText(window.location.href).then(() => {
      alert('Product link copied to clipboard!');
    });
  }
}

// Variant selection handling
document.addEventListener('DOMContentLoaded', function() {
  const variantInputs = document.querySelectorAll('.variant-input');
  const variantSelect = document.getElementById('variant-select');
  const priceElements = document.querySelectorAll('.price-regular, .price-sale');
  const compareElements = document.querySelectorAll('.price-compare');
  const addToCartBtn = document.querySelector('.btn-add-cart');
  
  // Update variant selection styling
  variantInputs.forEach(input => {
    input.addEventListener('change', function() {
      const labels = document.querySelectorAll('.variant-label');
      labels.forEach(label => {
        label.classList.remove('border-gray-900', 'bg-gray-900', 'text-white');
        label.classList.add('border-gray-300');
      });
      
      if (this.checked) {
        const label = document.querySelector(`label[for="${this.id}"]`);
        label.classList.remove('border-gray-300');
        label.classList.add('border-gray-900', 'bg-gray-900', 'text-white');
      }
      
      updateVariantSelection();
    });
  });
  
  function updateVariantSelection() {
    // Get selected options
    const selectedOptions = [];
    variantInputs.forEach(input => {
      if (input.checked) {
        selectedOptions.push(input.value);
      }
    });
    
    // Find matching variant
    const variants = {{ product.variants | json }};
    const selectedVariant = variants.find(variant => {
      const variantOptions = variant.title.split(' / ');
      return selectedOptions.every((option, index) => variantOptions[index] === option);
    });
    
    if (selectedVariant) {
      // Update hidden select
      variantSelect.value = selectedVariant.id;
      
      // Update pricing
      updatePricing(selectedVariant);
      
      // Update availability
      updateAvailability(selectedVariant);
      
      // Update main image if variant has featured image
      if (selectedVariant.featured_media) {
        changeMainImage(selectedVariant.featured_media.url, 0);
      }
    }
  }
  
  function updatePricing(variant) {
    const price = variant.price;
    const comparePrice = variant.compare_at_price;
    
    priceElements.forEach(element => {
      if (element.classList.contains('price-sale')) {
        element.textContent = new Intl.NumberFormat('{{ localization.country.currency.iso_code }}', {
          style: 'currency',
          currency: '{{ cart.currency.iso_code }}'
        }).format(price / 100);
      } else {
        element.textContent = new Intl.NumberFormat('{{ localization.country.currency.iso_code }}', {
          style: 'currency', 
          currency: '{{ cart.currency.iso_code }}'
        }).format(price / 100);
      }
    });
    
    compareElements.forEach(element => {
      if (comparePrice && comparePrice > price) {
        element.textContent = new Intl.NumberFormat('{{ localization.country.currency.iso_code }}', {
          style: 'currency',
          currency: '{{ cart.currency.iso_code }}'
        }).format(comparePrice / 100);
        element.style.display = 'inline';
      } else {
        element.style.display = 'none';
      }
    });
  }
  
  function updateAvailability(variant) {
    if (variant.available) {
      addToCartBtn.disabled = false;
      addToCartBtn.innerHTML = '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path></svg> Add to Cart';
    } else {
      addToCartBtn.disabled = true;
      addToCartBtn.innerHTML = 'Sold Out';
    }
  }
  
  // Product form submission
  document.getElementById('product-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const button = addToCartBtn;
    const originalText = button.innerHTML;
    
    button.disabled = true;
    button.innerHTML = 'Adding...';
    
    fetch('/cart/add.js', {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      // Update cart count
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          const cartCountElement = document.querySelector('#cart-count');
          if (cartCountElement) {
            cartCountElement.textContent = cart.item_count;
          }
        });
      
      button.innerHTML = 'Added to Cart!';
      button.classList.add('bg-green-600');
      
      setTimeout(() => {
        button.disabled = false;
        button.innerHTML = originalText;
        button.classList.remove('bg-green-600');
      }, 2000);
    })
    .catch(error => {
      console.error('Error adding to cart:', error);
      button.disabled = false;
      button.innerHTML = originalText;
    });
  });
});

// Collapsible details animation
document.querySelectorAll('details').forEach(detail => {
  detail.addEventListener('toggle', function() {
    const arrow = this.querySelector('svg');
    if (this.open) {
      arrow.style.transform = 'rotate(180deg)';
    } else {
      arrow.style.transform = 'rotate(0deg)';
    }
  });
});
</script>

<style>
.product-template {
  font-family: inherit;
}

.variant-label {
  transition: all 0.2s ease;
}

.variant-input:checked + .variant-label {
  border-color: hsl(var(--foreground));
  background-color: hsl(var(--foreground));
  color: hsl(var(--background));
}

.quantity-btn:hover {
  background-color: hsl(var(--accent));
}

.btn-add-cart:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-wishlist.active {
  color: hsl(var(--destructive));
  border-color: hsl(var(--destructive));
}

.details-section[open] summary svg {
  transform: rotate(180deg);
}

.details-section summary svg {
  transition: transform 0.2s ease;
}

/* Responsive adjustments */
@media (max-width: 1024px) {
  .product-main {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
}

@media (max-width: 640px) {
  .product-actions {
    flex-direction: column;
  }
  
  .btn-add-cart {
    width: 100%;
  }
  
  .btn-wishlist, .btn-share {
    position: static;
  }
}
</style>

{% schema %}
{
  "name": "Product Template",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_related_products",
      "label": "Show Related Products",
      "default": true
    },
    {
      "type": "range",
      "id": "related_products_count",
      "label": "Number of Related Products",
      "min": 2,
      "max": 8,
      "step": 1,
      "default": 4
    }
  ]
}
{% endschema %}